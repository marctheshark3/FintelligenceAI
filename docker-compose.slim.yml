version: '3.8'

services:
  # Main Application (Slim Build)
  fintelligence-api:
    build:
      context: .
      dockerfile: Dockerfile.slim
      target: production
      cache_from:
        - fintelligence-ai:latest
        - python:3.11-slim
    container_name: fintelligence-api-slim
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - APP_ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://fintelligence_user:fintelligence_pass@postgres:5432/fintelligence_ai
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    volumes:
      - ./src:/app/src  # For development hot reload
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - chromadb
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Lightweight)
  postgres:
    image: postgres:15-alpine
    container_name: fintelligence-postgres-slim
    environment:
      POSTGRES_USER: fintelligence_user
      POSTGRES_PASSWORD: fintelligence_pass
      POSTGRES_DB: fintelligence_ai
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fintelligence_user -d fintelligence_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Alpine)
  redis:
    image: redis:7-alpine
    container_name: fintelligence-redis-slim
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: fintelligence-chromadb-slim
    ports:
      - "8100:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Minimal Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fintelligence-prometheus-slim
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.slim.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=72h'  # Reduced retention
      - '--web.enable-lifecycle'
    networks:
      - fintelligence-network
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  prometheus_data:

networks:
  fintelligence-network:
    driver: bridge
