version: '3.8'

services:
  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  # FintelligenceAI API Backend
  fintelligence-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: fintelligence-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - APP_ENVIRONMENT=${APP_ENVIRONMENT:-development}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - POSTGRES_HOST=postgres
      - OLLAMA_BASE_URL=http://ollama:11434
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - chromadb
    volumes:
      - ./data:/app/data
      - ./knowledge-base:/app/knowledge-base
      - ./logs:/app/logs
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FintelligenceAI Web UI
  fintelligence-ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: fintelligence-ui
    ports:
      - "${UI_PORT:-3000}:80"
    environment:
      - API_BASE_URL=http://localhost:8000
    env_file:
      - .env
    depends_on:
      - fintelligence-api
    networks:
      - fintelligence-network
    restart: unless-stopped

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fintelligence-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/backups:/backups
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fintelligence-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: fintelligence-chromadb
    ports:
      - "${CHROMA_PORT:-8100}:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - fintelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fintelligence-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - fintelligence-network
    restart: unless-stopped
    depends_on:
      - fintelligence-api

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fintelligence-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - fintelligence-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # =============================================================================
  # OPTIONAL SERVICES
  # =============================================================================

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: fintelligence-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - fintelligence-api
      - fintelligence-ui
    networks:
      - fintelligence-network
    restart: unless-stopped
    profiles:
      - production

  # Ollama Local LLM (Optional)
  ollama:
    image: ollama/ollama:latest
    container_name: fintelligence-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - fintelligence-network
    restart: unless-stopped
    profiles:
      - local-ai
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  fintelligence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
