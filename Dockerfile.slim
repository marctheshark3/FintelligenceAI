# FintelligenceAI Slim Dockerfile
# Optimized for smaller image size and faster builds

# ================================
# Stage 1: Base Dependencies
# ================================
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=2.1.3 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# ================================
# Stage 2: Poetry Builder
# ================================
FROM base as poetry-builder

# Install Poetry
RUN pip install poetry==$POETRY_VERSION
RUN poetry config virtualenvs.create true
RUN poetry config virtualenvs.in-project true

# Copy dependency files only
COPY pyproject.toml poetry.lock* ./

# Install dependencies in virtual environment
RUN poetry install --only main --no-root --no-interaction --no-ansi \
    && rm -rf $POETRY_CACHE_DIR

# ================================
# Stage 3: Development (Optional)
# ================================
FROM poetry-builder as development

# Install dev dependencies
RUN poetry install --with dev --no-root --no-interaction --no-ansi \
    && rm -rf $POETRY_CACHE_DIR

# Create app user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

WORKDIR /app

# Copy the virtual environment from builder stage
COPY --from=poetry-builder /.venv /.venv

# Add venv to path
ENV PATH="/.venv/bin:$PATH"

# Copy application code
COPY --chown=appuser:appuser . .

# Create data directories
RUN mkdir -p /app/data/{chroma,uploads,dspy_cache,experiments} /app/logs \
    && chown -R appuser:appuser /app

USER appuser

EXPOSE 8000 8888

CMD ["uvicorn", "fintelligence_ai.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ================================
# Stage 4: Production Runtime
# ================================
FROM python:3.11-slim as production

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app user
RUN groupadd --gid 1000 appuser && \
    useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

WORKDIR /app

# Copy the virtual environment from builder stage
COPY --from=poetry-builder /.venv /.venv

# Add venv to path
ENV PATH="/.venv/bin:$PATH"

# Copy only essential application files
COPY --chown=appuser:appuser src/ ./src/

# Create data directories
RUN mkdir -p /app/data/{chroma,uploads,dspy_cache,experiments} /app/logs \
    && chown -R appuser:appuser /app

USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["python", "-m", "uvicorn", "fintelligence_ai.api.main:app", "--host", "0.0.0.0", "--port", "8000"]

# ================================
# Stage 5: Minimal Runtime (Ultra Slim)
# ================================
FROM python:3.11-alpine as minimal

# Install only essential runtime dependencies
RUN apk add --no-cache \
    libpq \
    curl

# Create app user
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -D -s /bin/sh appuser

WORKDIR /app

# Copy only the installed packages we need
COPY --from=poetry-builder /.venv/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy application
COPY --chown=appuser:appuser src/ ./src/

# Create minimal data directories
RUN mkdir -p /app/data /app/logs \
    && chown -R appuser:appuser /app

USER appuser

EXPOSE 8000

CMD ["python", "-m", "uvicorn", "fintelligence_ai.api.main:app", "--host", "0.0.0.0", "--port", "8000"] 