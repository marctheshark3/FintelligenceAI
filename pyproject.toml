[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fintelligence-ai"
version = "0.1.0"
description = "Intelligent RAG Pipeline & AI Agent System for ErgoScript generation using DSPy"
authors = ["FintelligenceAI Team <contact@fintelligence.ai>"]
readme = "README.md"
license = "MIT"
packages = [{include = "fintelligence_ai", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

# Core DSPy and LLM frameworks
dspy-ai = ">=2.4.0"
langchain = ">=0.1.0"
langchain-community = ">=0.0.20"
langchain-openai = ">=0.0.8"

# Vector Database and Embeddings
chromadb = ">=0.4.20"
sentence-transformers = ">=2.2.2"
openai = ">=1.12.0"

# FastAPI and Web Framework
fastapi = ">=0.109.0"
uvicorn = {extras = ["standard"], version = ">=0.27.0"}
pydantic = ">=2.5.0"
pydantic-settings = ">=2.1.0"

# Database and Storage
sqlalchemy = ">=2.0.25"
alembic = ">=1.13.1"
asyncpg = ">=0.29.0"
redis = ">=5.0.1"

# HTTP and API clients
httpx = ">=0.26.0"
aiohttp = ">=3.9.1"
requests = ">=2.31.0"

# Data Processing
pandas = ">=2.1.4"
numpy = ">=1.24.0"
pypdf = ">=3.17.4"
python-multipart = ">=0.0.6"
rank-bm25 = ">=0.2.2"

# Monitoring and Observability
structlog = ">=23.2.0"
rich = ">=13.7.0"
prometheus-client = ">=0.19.0"

# Configuration and Environment
python-dotenv = ">=1.0.0"
toml = ">=0.10.2"
click = ">=8.1.7"

# Date and Time
python-dateutil = ">=2.8.2"

# Async utilities
tenacity = ">=8.2.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = ">=7.4.4"
pytest-asyncio = ">=0.23.3"
pytest-cov = ">=4.1.0"
pytest-mock = ">=3.12.0"

# Code Quality
ruff = ">=0.1.9"
black = ">=23.12.1"
isort = ">=5.13.2"
mypy = ">=1.8.0"
pre-commit = ">=3.6.0"

# Documentation
mkdocs = ">=1.5.3"
mkdocs-material = ">=9.5.3"
mkdocstrings = {extras = ["python"], version = ">=0.24.0"}

# Development tools
ipython = ">=8.18.1"
jupyter = ">=1.0.0"
notebook = ">=7.0.6"

[tool.poetry.group.production.dependencies]
# Production monitoring
sentry-sdk = {extras = ["fastapi"], version = ">=1.40.0"}
newrelic = ">=9.4.0"

# Production database
psycopg2-binary = ">=2.9.9"

# Production server
gunicorn = ">=21.2.0"

[tool.poetry.group.ergo]
optional = true

[tool.poetry.group.ergo.dependencies]
# Ergo-specific dependencies - uncomment when available
# ergpy = ">=0.2.0"

[tool.poetry.scripts]
fintelligence = "fintelligence_ai.cli:main"

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fintelligence_ai"]
skip_glob = ["**/.venv/*", "**/venv/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "dspy.*",
    "chromadb.*",
    "langchain.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "scripts", "notebooks"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process for dev tools

# Coverage configuration
[tool.coverage.run]
source = ["fintelligence_ai"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
